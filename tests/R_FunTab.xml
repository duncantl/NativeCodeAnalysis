<section>
<title>Reading Constant Arrays - Compile Time Created</title>

<section>
<title>symbols.c</title>

<para>
<r:code>
library(Rllvm)
m = parseIR("symbols.ir")    
ce = getGlobalVariable(m, "CEntries")
val = getInitializer(ce)
</r:code>

<r:code>
elTypes = getElementTypes(getElementType(getType(val)))
</r:code>

<r:code>
length(val)
val[[1]]
</r:code>

<r:code>
sapply(1:2, function(i) getValue(val[[i]][[1]][[1]][[1]]))
</r:code>

<r:code>
els = val[]
sapply(els, function(x) if(!isZeroValue(x)) getValue(x[[1]][[1]][[1]]) else NA)

sapply(els, function(x) if(!isZeroValue(x)) getName(x[[2]][[1]]) else NA)
</r:code>

<r:code>
sapply(els, function(x) if(!isZeroValue(x)) getValue(x[[3]]) else NA)
</r:code>

</para>
</section>


<section>
<title><c:var>R_FunTab</c:var> in <file>names.c</file></title>



<para>
<r:code>
RMainDir = "~/R/R-new/build3/src/main"
m = parseIR(file.path(RMainDir, "names.ir"))
</r:code>
With additions to the <cpp/> code in <r:pkg>Rllvm</r:pkg>,
we can now get the entire contents with
<r:code>
fntab = getValue(m[["R_FunTab"]])
</r:code>
We can put the <r/> functions as names on the list:
<r:code>
names(fntab) = sapply(fntab, `[[`, 1)
</r:code>
</para>
<para>
The way to do this in R
<r:code>
ftab = getGlobalVariable(m, "R_FunTab")
val = getInitializer(ftab)
els = val[]
w = sapply(els, isZeroValue)
els = els[!w]
</r:code>

<r:code>
cfun = sapply(els, function(x) getName(x[[2]]))
names(cfun) = sapply(els, function(x) getValue(x[[1]][[1]][[1]]))
</r:code>

</para>


<para>
Note that there are two repeated elements, La_rs, La_rs_cmplx so we cannot use those as row names for a data frame:  
<r:code>
funTab = data.frame(rfunction = names(cfun), croutine = cfun, stringsAsFactors = FALSE)
</r:code>
</para>


<para>
Now we append the offset/op, eval and arity  information to the data frame:
<r:code>
funTab[c("op", "eval", "arity")] = lapply(3:5, function(i)
                                        sapply(els, function(x) getValue(x[[i]])))
</r:code>
</para>

<para>
We have lost the symbolic information such as CTXT_BREAK, CTXT_NEXT, PLUSOP, etc. in the op/offset field.
However, we don't need these as the literal values are used in the routines.
</para>

<!--
<r:code>
op = sapply(els, function(x) getValue(x[[3]]))  
eval = sapply(els, function(x) getValue(x[[4]]))
arity = sapply(els, function(x) getValue(x[[5]]))
</r:code>
-->

</section>

</section>
